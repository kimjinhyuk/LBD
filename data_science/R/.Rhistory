setwd("C:/Users/kimji/00_LearningByDoing/data_science/R/ggplot2")
getwd()
getwd()
setwd("C:/Users/kimji/00_LearningByDoing/data_science/R")
getwd()
install.packages("arules")
basket <- readLines("basket.csv")
basket
# Transaction으로 변환하기 위해 ',' 기준으로 잘라냄
basket_trans <- strsplit(basket, ",")
basket_trans
# Transaction 형태로 변환
basket_trans <- as(basket_trans, "transactions")
basket_trans
# Transaction 형태로 변환
basket_trans <- as(basket_trans, "transactions")
basket <- readLines("basket.csv")
basket
# Transaction으로 변환하기 위해 ',' 기준으로 잘라냄
basket_trans <- strsplit(basket, ",")
basket_trans
# Transaction 형태로 변환
basket_trans <- as(basket_trans, "transactions")
# Transaction 형태로 변환
basket_trans <- as(basket_trans, "transaction")
# Transaction 형태로 변환
basket_trans <- as(basket_trans, "transactions")
# Transaction 형태로 변환
basket_trans <- as(basket_trans, "transactions")
# Transaction 형태로 변환
basket_trans <- as(basket_trans, "transactions")
basket_trans
library(arules)
list.files()
basket <- readLines("basket.csv")
basket
# Transaction으로 변환하기 위해 ',' 기준으로 잘라냄
basket_trans <- strsplit(basket, ",")
basket_trans
# Transaction 형태로 변환
basket_trans <- as(basket_trans, "transactions")
basket_trans
inspect(basket_trans)
#연관성 규칙 도출
basket_apriori <- apriori(basket_trans, parameter = list(support = 0.1, confidence = 0.8))
basket_apriori
inspect(basket_apriori)
#향상도가 1.2 이상인 데이터 확인
inspect(subset(basket_apriori, subset = lift > 1.2))
#조건에 삼겹살이 포함된 연관성 규칙
inspect(subset(basket_apriori, subset = lhs %>%  c("삼겹살")))
#조건에 삼겹살이 포함된 연관성 규칙
inspect(subset(basket_apriori, subset = lhs %in%  c("삼겹살")))
#조건에 삼겹살이나 생수가 포함된 연관성 규칙
inspect(subset(basket_apriori, subset = lhs %in%  c("삼겹살", "생수수")))
#조건에 삼겹살이나 생수가 포함된 연관성 규칙
inspect(subset(basket_apriori, subset = lhs %in%  c("삼겹살", "생수")))
#조건에 삼겹살이나 생수가 포함된 연관성 규칙
inspect(subset(basket_apriori, subset = lhs %ain%  c("삼겹살", "생수")))
apple <- read.csv("apple.csv")
apple
# 데이터 살펴보기
summary(apple)
# 데이터 살펴보기
summary(apple)
apple
# 데이터 살펴보기
summary(apple)
str(apple)
apple <- read.csv("apple.csv", stringAsFactors =T)
apple <- read.csv("apple.csv", stringAsFactors = T)
apple <- read.csv("apple.csv", stringAsFactors = TRUE)
apple <- read.csv("apple.csv", stringAsFactors = T)
apple <- read.csv("apple.csv", stringsAsFactors = T)
apple
# 데이터 살펴보기
summary(apple)
str(apple)
#품종별 무게분포
boxplot(weight ~ model, data = apple)
#품종별 당도분포
boxplot(sugar ~ model, data = apple)
#품종별 산도분포
boxplot(acid ~ model, data = apple)
ggplot(data = apple, aes(x = color, fill = model)) + geom_bar()
#색상별 사과 품종 갯수
library(ggplot2)
ggplot(data = apple, aes(x = color, fill = model)) + geom_bar()
apple
# train/test 나누기
install.packages("caret")
library(caret)
apple_index <- createDataPartition(apple$model, p = 0.8, list = F)
apple_index
nrow(apple_train)
apple_train <- apple[apple_index, ]
apple_test <- apple[-apple_index, ] #apple_index를 제외한 나머지
nrow(apple_train)
nrow(apple_test)
install.packages("rpart")
install.packages("rpart")
library(rpart)
apple_model <- rpart(model~., data = apple_train, control = rpart.control(minsplit = 2) )#모든 요인에 따른 모델 예측
apple_model
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(apple_model)
predict(apple_model, apple_test, type = "class")
# 평가하기
apple_test
# 예측하기
apple_predict <- predict(apple_model, apple_test, type = "class")
actual <- apple_test$model
confusionMatrix(actual, apple_predict, mode = "everything")
library(caret)
confusionMatrix(actual, apple_predict, mode = "everything")
install.packages("e1071")
confusionMatrix(actual, apple_predict, mode = "everything")
